#!/usr/bin/env ruby

require 'set'
require 'optparse'
require 'pathname'

CONFIG_DIR = Pathname.new(ENV['PKGSET_DIR'] || '/etc/pkgset')
SET_DIR = CONFIG_DIR + 'sets'
INSTALL_DIR = CONFIG_DIR + 'installed-sets'

class PkgsetError < StandardError; end

def join_lines(x)
    x.join("\n") + "\n"
end

def map_lines(path, &block)
    old_contents = path.readlines
    new_contents = old_contents.map(&block).reject(&:nil?)

    if old_contents != new_contents
        path.open('w') do |f|
            f.write(new_contents.join("\n") + "\n")
        end
    end
end

class PackageSet
    attr_reader :name

    def initialize(name)
        @name = name
        @path = SET_DIR + name
    end

    def to_s
        @name
    end

    def ==(other)
        @name == other.name
    end

    alias_method :eql?, :==

    def hash
        @name.hash
    end

    def self.[](name)
        # TODO existence check
        s = new(name)
        raise PkgsetError, "no such set '#{s}'" unless s.exist?
        s
    end

    def create(pkgs)
        raise if @path.exist?
        merge(pkgs)
    end

    def self.all
        all = SET_DIR.children(false).map { |n| self[n.basename.to_s] }
        Set.new(all)
    end

    def self.accumulate(pkgsets)
        pkgsets.reduce(Set.new) { |a, s| a.merge(s.get) }
    end

    def self.all_installed
        installed = INSTALL_DIR.children(false).map { |n| self[n.basename.to_s] }
        Set.new(installed)
    end

    def exist?
        @path.exist?
    end

    def get
        lines = @path.readlines.map { |line| line.strip }
        pkgs = lines.reject { |line| line.start_with?('#') or line.empty? }
        Set.new(pkgs)
    end

    def mark_installed
        link = INSTALL_DIR + @name
        if !link.symlink?
            target = @path.relative_path_from(INSTALL_DIR)
            link.make_symlink(target)
        end
    end

    def mark_uninstalled
        link = INSTALL_DIR + @name
        link.delete if link.symlink?
    end

    def installed?
        (INSTALL_DIR + @name).symlink?
    end

    def merge(pkgs)
        @path.open('a+') do |f|
            existing = f.readlines.map { |l| l.strip }
            extra = pkgs - existing
            f.write(extra.to_a.join("\n"))
            f.write("\n")
            return Set.new(extra)
        end
    end

    def remove(pkgs)
        map_lines(@path) do |line|
            line unless pkgs.include?(line.strip)
        end
    end

    def replace(old_name, new_name)
        map_lines(@path) do |line|
            line = "#{new_name}\n" if line.strip == old_name
            line
        end
    end
end

def xargs(command, args)
    # TODO implement xargs behaviour
    if !args.empty?
        system(*(command + args))
    else
        true
    end
end

def cmd_to_list(command)
    IO.popen(command) do |f|
        return f.readlines.map { |l| l.strip }
    end
end

class PackageManagerAPI
    def initialize(program)
        @program = program
    end
end

class PacmanAPI < PackageManagerAPI
    def _all_installed
        cmd_to_list(%w[pacman -Qq])
    end

    def explicitly_installed
        Set.new(cmd_to_list(%w[pacman -Qeq]))
    end

    def install(pkgs)
        to_install = pkgs - _all_installed
        (to_install.empty? || xargs([@program, '-S', '--needed'], to_install)) \
        && xargs([@program, '-D', '--asexplicit'], pkgs)
    end

    def uninstall(pkgs, purge:)
        xargs([@program, '-D', '--asdeps'], pkgs)
    end
end

def which(program)
    system('which', program, [:out, :err] => '/dev/null')
end

def prepare
    CONFIG_DIR.mkpath
    SET_DIR.mkpath
    INSTALL_DIR.mkpath

    alias_ = ENV['PKGSET_ALIAS']
    $api = if which('pacman')
        PacmanAPI.new(alias_ || 'pacman')
    else
        raise PkgsetError, "can't find any supported package manager"
    end
end

def puts_info(str)
    puts "pkgset: #{str}"
end

FAILURE = 1

UNINSTALL_MESSAGE = <<-END
If any packages are no longer in an installed set, they will be marked for
removal from the system. Use the auto-remove feature of your package manager
to uninstall them, e.g.

    Arch:   pacman -Rs $(pacman -Qdttq)
END
.rstrip

def main

    case ARGV.shift
    when 'install', 'in'
        OptionParser.new do |op|
            op.on('-h', '--help') do
                puts <<-USAGE
Usage: pkgset install SET...

Install sets of packages.

Options:
  -h, --help          Show this help message
USAGE
                exit
            end
        end.order!

        prepare

        set_names = ARGV
        sets = set_names.map do |name|
            PackageSet[name]
        end

        to_install = PackageSet.accumulate(sets)

        if $api.install(to_install.to_a)
            sets.each do |set|
                set.mark_installed
            end
        else
            exit FAILURE
        end

    when 'add', 'a'
        opts = {}
        OptionParser.new do |op|
            op.on('-h', '--help') do
                puts <<-USAGE
Usage: pkgset add [-m] [-n [-i]] SET PACKAGE...

Add packages to the given set. If the set is installed, the packages will
be installed with the package manager.

Options:
  -n, --new             Create the set if it does not exist
  -i, --installed       If the set is created by '--new', also install it
  -m, --move            Remove the given packages from all other sets
  -h, --help            Show this help message
USAGE
                exit
            end
            op.on('-n', '--new')
            op.on('-i', '--installed')
            op.on('-m', '--move')
        end.order!(into: opts)

        prepare

        set_name = ARGV.shift
        set = if opts[:new]
            PackageSet.new(set_name)
        else
            PackageSet[set_name]
        end

        # Install the set if -n -i are given and the set doesn't exist yet
        also_install = opts[:new] && opts[:installed] && !set.exist?

        packages = Set.new(ARGV)

        # Add if either the set is not installed and we shouldn't install it, or the package install command succeeds
        if (!set.installed? && !also_install) || $api.install(packages.to_a)
            set.merge(packages)
            set.mark_installed if also_install
        else
            exit FAILURE
        end

        if opts[:move]
            other_sets = PackageSet.all.delete(set)
            other_pkgs = PackageSet.accumulate(other_sets)
            moved = packages & other_pkgs

            # If the set is installed, we've already done the packages - so we
            # only need to ensure we uninstall otherwise
            if set.installed? || $api.uninstall(moved.to_a, purge: opts[:purge])
                other_sets.each do |s|
                    s.remove(moved)
                end
            end
        end

    when 'remove', 'r'
        opts = {}
        OptionParser.new do |op|
            op.on('-h', '--help') do
                puts <<-USAGE
Usage: pkgset remove SET PACKAGE...

Remove packages from the given set.

#{UNINSTALL_MESSAGE}

Options:
  -h, --help          Show this help message
USAGE
                exit
            end

            op.on('-p', '--purge')
        end.order!(into: opts)

        set_name = ARGV.shift

        prepare

        set = PackageSet[set_name]
        packages = Set.new(ARGV)

        # We only need to uninstall packages which aren't in another installed set
        other_pkgs = PackageSet.accumulate(PackageSet.all_installed.delete(set))
        to_uninstall = packages - other_pkgs

        # Remove the selected packages if either the set is uninstalled, or our
        # package uninstall command works
        if !set.installed? || $api.uninstall(to_uninstall.to_a, purge: opts[:purge])
            set.remove(packages)
        else
            exit FAILURE
        end

    when 'uninstall', 'un'
        opts = {}
        OptionParser.new do |op|
            op.on('-h', '--help') do
                puts <<-USAGE
Usage: pkgset uninstall SET...

Mark sets as uninstalled.

#{UNINSTALL_MESSAGE}

Options:
  -h, --help          Show this help message
USAGE
                exit
            end
            op.on('-p', '--purge')
        end.order!(into: opts)

        set_names = ARGV

        if set_names.empty?
            raise PkgsetError, "no sets specified"
        end

        prepare

        sets = set_names.map do |name|
            PackageSet[name]
        end

        to_uninstall = Set.new
        sets.each do |set|
            if set.installed?
                to_uninstall << set
            else
                puts_info "set '#{set}' not installed, skipping"
            end
        end

        # Remove packages in any of the given sets that aren't in any other installed sets.
        remaining_sets = PackageSet.all_installed - to_uninstall
        uninstall_pkgs = PackageSet.accumulate(to_uninstall) - PackageSet.accumulate(remaining_sets)

        if $api.uninstall(uninstall_pkgs.to_a, purge: opts[:purge])
            to_uninstall.each do |s|
                puts_info "uninstalling set '#{s}'"
                s.mark_uninstalled
            end
        else
            exit FAILURE
        end

    when 'unadded'
        OptionParser.new do |op|
            op.on('-h', '--help') do
                puts <<-USAGE
Usage: pkgset unadded

List all packages which are explicitly installed on the system, but not in
any set.

For example, you can capture these into a set with xargs:

    $ pkgset unadded | xargs pkgset add my-set

Options:
  -h, --help          Show this help message
USAGE
                exit
            end
        end.order!

        prepare

        in_set = PackageSet.accumulate(PackageSet.all)
        in_system = $api.explicitly_installed

        (in_system - in_set).each do |pkg|
            puts pkg
        end

    when 'replace-all'
        OptionParser.new do |op|
            op.on('-h', '--help') do
                puts <<-USAGE
Usage: pkgset replace-all OLD-PACKAGE NEW-PACKAGE

Replace every occurence of a package in all sets with a new package.

Options:
  -h, --help          Show this help message
USAGE
                exit
            end
        end.order!

        prepare

        old_name = ARGV.shift
        new_name = ARGV.shift

        PackageSet.all.each do |set|
            set.replace(old_name, new_name)
        end

    when 'list', 'l'
        opts = {}
        OptionParser.new do |op|
            op.on('-h', '--help') do
                puts <<-USAGE
Usage: pkgset list [SET]

List all sets, or the contents of a given set.

Options:
  -h, --help          Show this help message
  -t, --tree          List contents of all sets when none given
USAGE
                exit
            end
            op.on('-t', '--tree')
        end.order!(into: opts)

        prepare

        if ARGV.empty?
            lines = PackageSet.all.each do |s|
                sym = s.installed? ? '*' : ' '
                puts "#{sym} #{s.name}"
                if opts[:tree]
                    s.get.each { |pkg| puts "    #{pkg}" }
                end
            end
        else
            set = PackageSet[ARGV.shift]
            puts join_lines(set.get.to_a)
        end

    when '--help', '-h'
        puts <<-USAGE
Usage: pkgset COMMAND [ARGUMENT...]

Manage package sets.

Commands:
  add  (a)
  remove  (r)
  install  (in)
  uninstall  (un)
  list  (l)
  replace-all
  unadded

Options:
  -h, --help          Show this help message
USAGE

    else
        raise PkgsetError, "unrecognised command"
    end
end

begin
    main
rescue PkgsetError => exc
    puts_info "error: #{exc}"
end
